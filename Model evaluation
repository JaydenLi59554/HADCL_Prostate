""" 
Survival Analysis Pipeline for Clinical Data
"""
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.impute import KNNImputer
from sksurv.util import Surv
from sksurv.linear_model import CoxPHSurvivalAnalysis, CoxnetSurvivalAnalysis
from sksurv.ensemble import RandomSurvivalForest, GradientBoostingSurvivalAnalysis
from sksurv.metrics import concordance_index_censored  
import shap
import matplotlib.pyplot as plt

# --------------------------
# Data Preparation
# --------------------------
def load_and_preprocess(data_path):
    """Load and preprocess clinical data"""
    df = pd.read_csv(data_path)
    
    # Feature engineering
    df = pd.get_dummies(df, drop_first=True)
    
    # Handle missing values
    imputer = KNNImputer(n_neighbors=5)
    imputed_data = imputer.fit_transform(df)
    
    return pd.DataFrame(imputed_data, columns=df.columns)

# --------------------------
# Model Training
# --------------------------
def train_survival_models(X_train, y_train):
    """Train multiple survival analysis models"""
    models = {
        'CoxPH': CoxPHSurvivalAnalysis(),
        'RSF': RandomSurvivalForest(n_estimators=100),
        'CoxBoost': GradientBoostingSurvivalAnalysis(loss="coxph"),
        'CoxNet': CoxnetSurvivalAnalysis(l1_ratio=1.0)
    }
    
    for name, model in models.items():
        print(f"Training {name}...")
        model.fit(X_train, y_train)
    
    return models

# --------------------------
# Model Evaluation
# --------------------------
def evaluate_models(models, X_test, y_test):
    """Evaluate model performance"""
    results = {}
    
    for name, model in models.items():
        preds = model.predict(X_test)
        c_index = concordance_index_censored(y_test['event'], y_test['time'], preds)
        results[name] = c_index[0]
    
    return results

# --------------------------
# Interpretability
# --------------------------
def shap_analysis(model, X_train, X_test, feature_names, output_path):
    """SHAP value analysis"""
    explainer = shap.Explainer(model.predict, X_train)
    shap_values = explainer(X_test)
    
    plt.figure()
    shap.summary_plot(shap_values, X_test, feature_names=feature_names, show=False)
    plt.savefig(output_path, bbox_inches='tight')
    plt.close()

# --------------------------
# Main Workflow
# --------------------------
if __name__ == "__main__":
    # Load data
    data = load_and_preprocess("path/to/clinical_data.csv")
    
    # Prepare survival data
    X = data.drop(columns=['time', 'status'])
    y = Surv.from_dataframe('event', 'time', data.rename(columns={'status':'event'}))
    
    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
    
    # Model training
    models = train_survival_models(X_train, y_train)
    
    # Evaluation
    performance = evaluate_models(models, X_test, y_test)
    print("Model Performance:\n", pd.DataFrame.from_dict(performance, orient='index'))
    
    # Visualization
    for model_name, model in models.items():
        shap_analysis(model, X_train, X_test, 
                     feature_names=X.columns,
                     output_path=f"{model_name}_shap_analysis.png")



